// <auto-generated />
using System;
using DataActions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataActions.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataActions.DataModels.FileDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SearchQueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SearchQueryId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("DataActions.DataModels.LogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SearchQueryId")
                        .HasColumnType("int");

                    b.Property<string>("cs1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cs1Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("deviceVendor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("deviceVersion")
                        .HasColumnType("int");

                    b.Property<string>("dhost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dmac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("externalId")
                        .HasColumnType("int");

                    b.Property<string>("msg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("severity")
                        .HasColumnType("int");

                    b.Property<string>("shost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("signatureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("smac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("suser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SearchQueryId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("DataActions.DataModels.SearchQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("queryString")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SearchQueries");
                });

            modelBuilder.Entity("DataActions.DataModels.FileDetail", b =>
                {
                    b.HasOne("DataActions.DataModels.SearchQuery", null)
                        .WithMany("FileDetails")
                        .HasForeignKey("SearchQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataActions.DataModels.LogEntry", b =>
                {
                    b.HasOne("DataActions.DataModels.SearchQuery", null)
                        .WithMany("LogEntries")
                        .HasForeignKey("SearchQueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataActions.DataModels.SearchQuery", b =>
                {
                    b.Navigation("FileDetails");

                    b.Navigation("LogEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
